parameters:
  environment: ''
  jobProperties:
    dependsOn: 'Build'
    condition: 'succeeded(''Build'')'
    # Use these to deploy from a package feed
    # dependsOn:
    # - 'Publish'
    # - 'Build'
  powerAppsEnvironment:
    connectionString: '$(environment.connectionString)'
    serviceConnection: '$(environment.serviceConnection)'
  solution:
    artifactName: 'packed-solution' #'$(Pipeline.Workspace)\packed-solution\$(solution.name)_managed.zip'
    # Alternatively, can deploy from a package feed
    # feed: ''
    # name: $[ dependencies.Build.outputs['ReadSolutionJson.solution.name'] ]
    # package: $[ dependencies.Build.outputs['ReadSolutionJson.package.name'] ]
  toolset: 'powershell'
  toolsDirectory: '$(Pipeline.Workspace)\tools'

jobs:
- deployment: ${{ coalesce(parameters.jobProperties.name, 'Deploy') }}

  ${{ if eq(parameters.jobProperties.pool, '') }}:
    pool:
      vmImage: 'windows-latest'
  
  ${{ if eq(parameters.jobProperties.environment, '') }}:
    environment: ${{ parameters.environment }}

  variables:
    ${{ if eq(parameters.jobProperties.variables.solution.folder, '') }}:
      ${{ if ne(parameters.solution.artifactName, '') }}:
        solution.folder: $(Pipeline.Workspace)\${{ parameters.solution.artifactName }}
      ${{ if eq(parameters.solution.artifactName, '') }}:
        solution.folder: $(Pipeline.Workspace)\${{ parameters.solution.feed }}\${{ parameters.solution.package }}
    ${{ if eq(parameters.jobProperties.variables.package.name, '') }}:
      package.name: ${{ parameters.solution.package }}
    ${{ if eq(parameters.jobProperties.variables.solution.name, '') }}:
      solution.name: ${{ parameters.solution.name }}
    ${{ each variable in parameters.jobProperties.variables }}:
      ${{ variable.key }}: ${{ variable.value }}

  ${{ each pair in parameters.jobProperties }}:
    ${{ if not(in(pair.key, 'name', 'pool', 'variables' )) }}:
      ${{ pair.key }}: ${{ pair.value }}

  strategy:
    runOnce:
      deploy:
        steps:

        - ${{ if ne(parameters.solution.artifactName, '') }}:
          - template: ../steps/get-solution-info.yml
            parameters:
              attributes:
              - 'name'
              solutionJsonPath: '$(solution.folder)\solution.json'
        
        - ${{ if eq(parameters.solution.artifactName, '') }}:
          - task: UniversalPackages@0
            inputs:
              command: 'download'
              downloadDirectory: '$(solution.folder)'
              feedsToUse: 'internal'
              vstsFeed: ${{ parameters.solution.feed }}
              vstsFeedPackage: $(package.name)
              vstsPackageVersion: '*'

        - template: ../steps/import-solution.yml
          parameters:
            powerAppsEnvironment: ${{ parameters.environmentDetails }}
            solutionZipPath: '$(solution.folder)\$(solution.name)_managed.zip'
            toolset: ${{ parameters.toolset }}
            toolsDirectory: ${{ parameters.toolsDirectory }}
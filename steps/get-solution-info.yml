parameters:
  solutionJsonPath: 'solution.json'
  attributes:
  - 'contentsPath'
  - 'name'
  - 'packageDescription'
  - 'packageName'
  - 'version'
  outputs:
    # Set this variable to be available in future jobs
  # - 'contentsPath'
  # - 'name'
  # - 'packageDescription'
  # - 'packageName'
  # - 'version'
  variableNameMapping:
    # Usage:
    # attributeName: variableName

    # Defaults:
    contentsPath: 'solution.contentsPath'
    name: 'solution.name'
    packageDescription: 'package.description'
    packageName: 'package.name'
    version: 'solution.version'
      # checks three places for version (priority order)
      #   1. solution folder containing unpacked contents
      #   2. solution json file
      #   3. zipped solution archive

steps:
- pwsh: |
    $attributes = $env:ATTRIBUTES.Split(",")
    $outputs = $env:OUTPUTS.Split(",")
    $variableNames = @{
      contentsPath = @{
        env = $env:CONTENTS_PATH
        default = "solution.contentsPath"
      }
      name = @{
        env = $env:NAME
        default = "solution.name"
      }
      packageDescription = @{
        env = $env:PACKAGE_DESCRIPTION
        default = "package.description"
      }
      packageName = @{
        env = $env:PACKAGE_NAME
        default = "package.name"
      }
      version = @{
        env = $env:VERSION
        default = "solution.version"
      }
    }

    function Set-PipelineVariable {
      param(
        [string]$attribute,
        [string]$value
      )
      Write-Host "Called Set-PipelineVariable `"$attribute`", `"$value`""

      $nameMapping = $variableNames[$attribute]
      Write-Host "`$nameMapping = $($nameMapping | ConvertTo-Json)"

      $variableName = `
        if ([string]::IsNullOrEmpty($nameMapping.env)) {
          $nameMapping.default
        } else {
          $nameMapping.env
        }
      Write-Host "`$variableName = $variableName"
      
      Write-Host "##vso[task.setvariable variable=$variableName]$value"
      if ($outputs -contains $attribute) {
        Write-Host "##vso[task.setvariable variable=$variableName;isOutput=true]$value"
      }
    }

    $solution = `
      Get-Content `
        -Raw `
        -Path $env:SOLUTION_JSON_PATH `
      | ConvertFrom-Json

    if ($solution.contentsPath) { 
      $solutionRelativePath = $solution.contentsPath
    } else {
      $solutionRelativePath = "contents"
    }
    $solutionFolder = $env:SOLUTION_JSON_PATH -Replace "(.*?[/\\]?)[^/\\]*.json$", "`$1"
    $contentsPath = "$solutionFolder$solutionRelativePath"

    if (-Not [string]::IsNullOrEmpty($env:CONTENTS_PATH)) {
      Set-PipelineVariable "contentsPath", $contentsPath
    }
    
    if (-Not [string]::IsNullOrEmpty($env:NAME)) {
      Set-PipelineVariable "name", $solution.name
    }

    if (-Not [string]::IsNullOrEmpty($env:PACKAGE_DESCRIPTION)) {
      $description = if ($solution.description -eq $null) { "" } else { $solution.description }
      Set-PipelineVariable "packageDescription", $description
    }

    if (-Not [string]::IsNullOrEmpty($env:PACKAGE_NAME)) {
      if ($solution.packageName -eq $null) {
        $packageName = $solution.name.ToLower() -Replace '_', '-'
      } else {
        $packageName = $solution.packageName
      }
      Set-PipelineVariable "packageName", $packageName
    }

    if (-Not [string]::IsNullOrEmpty($env:VERSION)) {
      if (Test-Path $contentsPath) {
        $version = (Select-Xml `
          -Path "$contentsPath\Other\Solution.xml" `
          -XPath "/ImportExportXml/SolutionManifest/Version" `
        ).Node.InnerText
      } elseif (-Not [string]::IsNullOrEmpty($solution.version)) {
        $version = $solution.version
      } else {
        Expand-Archive `
          -Path "$solutionFolder$($solution.name).zip" `
          -DestinationPath "$contentsPath"
        $version = (Select-Xml `
          -Path "$contentsPath\solution.xml" `
          -XPath "/ImportExportXml/SolutionManifest/Version" `
        ).Node.InnerText
      }
      Set-PipelineVariable "version", $version
    }
  name: 'ReadSolutionJson'
  env:
    ATTRIBUTES: ${{ join(',', parameters.attributes) }}
    OUTPUTS: ${{ join(',', parameters.outputs) }}
    SOLUTION_JSON_PATH: ${{ parameters.solutionJsonPath }}

    CONTENTS_PATH: ${{ parameters.variableNameMapping.contentsPath }}
    NAME: ${{ parameters.variableNameMapping.name }}
    PACKAGE_DESCRIPTION: ${{ parameters.variableNameMapping.packageDescription }}
    PACKAGE_NAME: ${{ parameters.variableNameMapping.packageName }}
    VERSION: ${{ parameters.variableNameMapping.version }}